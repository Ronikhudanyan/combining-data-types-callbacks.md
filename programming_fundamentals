// Write a ~1 sentence summary for each one
// Which ones surprise you (if any)?
// Which one is currently giving you the most struggle?

// DRY 
// -Dont repeat yourself, you never want to do the same thing over and over again when there is a loop or function that can do it for you.

// KISS
// -Keep your code as simple as possible easier to read and work on

// YAGNI
// - Do not add functionality until it is absolutely needed

// DO THE SIMPLEST THING THAT COULD POSSIBLY WORK 
// -Always try to find the most simple method to your code. Dont make it hard for no reason, double check you are using most simple method.

// DONT MAKE ME THINK
// -If the code makes you think heavily it can be simplified

// WRITE CODE FOR THE MAINTAINER 
// -Always write your code with the mindset that a random stranger is going to maintain it down the line.

// SINGLE RESPONSIBILITY PRINCIPLE
// -One reason to be rewritten 

// AVOID PREMATURE OPTIMIZATION
// -Do not optoize until all your code is working

// SEPARATION OF CONCERNS
// -Different areas of functionality should be controled by one module


// which one surprised you?
// -separation of concerns, this makes no sense to me because we will write 10 loops to do the same thing in our code alongs? 

// which one is giving you struggle?
// Single RESPONSIBILITY principle, I do not understand this at all or what it is trying to say.



// const f = l => {
//   let es = 0, p = 0, c = 1, n = 0
//   while (c <= l) { //1 is less than or equal to 55
//     n = c + p; // 0 = 1 + 0
//     [c, p] = [n, c]// 1,0. 1,1
//     es += (c % 2 === 0) ? c : 0
//   }
//   return es
// }

// console.log(f(55)) // No idea whats going on here


// const f2 = (limit) => {
//   let evenSum = 0;
//   let previous = 0;
//   let current = 1;
//   while (current <= limit) {
//     let next = current + previous;// 1,2, it adds one to the previous number every time
//     previous = current;
//     current = next;
//     if (current % 2 === 0) { //if current is divisible by 2 with 0 remainders add current to evenSum
//       evenSum += current;
//     }
//   }
//   return evenSum;
// }


//  console.log(f2(55))

// in keeping with one of our programming principals (write code for the maintainer): What would have been a more semantic name for this function (hint: this is a problem we had for either lab or hw and is considered a classic ) - are there any other variable names or things that would make this code easier to read and understand?
//-addSum ?

// if you started a new job and your project was to expand the functionality of this function by allowing a second argument and then based on that second argument, returning the sum of even or odd numbers, which code would you rather start working with f or f2?
// -f2


// Finally, the 'shorter' code style doesn't use semi-colons, except for the fourth line. Remove this semi-colon! Run the code, is this semi-colon necessary?
//-yes
